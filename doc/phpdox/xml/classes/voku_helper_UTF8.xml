<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="voku\helper\UTF8" namespace="voku\helper" name="UTF8" abstract="false" final="false" start="13" end="6817">
  <file path="/home/lars/PhpstormProjects/portable-utf8/src/voku/helper" file="UTF8.php" realpath="/home/lars/PhpstormProjects/portable-utf8/src/voku/helper/UTF8.php" size="206704" time="2016-06-09T15:26:09+00:00" unixtime="1465485969" sha1="58d264397ede5410e8654c303cbe97d173de9936" relative="voku/helper/UTF8.php"/>
  <docblock>
    <description compact="UTF8-Helper-Class"/>
    <package value="voku\helper"/>
  </docblock>
  <member name="win1252ToUtf8" type="array" default="" visibility="protected" static="true" line="18">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="cp1252ToUtf8" type="array" default="" visibility="protected" static="true" line="51">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="whitespace" type="array" default="" visibility="protected" static="true" line="88">
    <docblock>
      <description compact="Numeric code point =&gt; UTF-8 Character">url: http://www.w3schools.com/charsets/ref_utf_punctuation.asp</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="whitespaceTable" type="array" default="" visibility="protected" static="true" line="144">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="bidiUniCodeControlsTable" type="array" default="" visibility="protected" static="true" line="174">
    <docblock>
      <description compact="bidirectional text chars">url: https://www.w3.org/International/questions/qa-bidi-unicode-controls</description>
      <var type="array"/>
    </docblock>
  </member>
  <member name="commonCaseFold" type="array" default="" visibility="protected" static="true" line="198">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="brokenUtf8ToUtf8" type="array" default="" visibility="protected" static="true" line="216">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="utf8ToWin1252" type="array" default="" visibility="protected" static="true" line="307">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="utf8MSWord" type="array" default="" visibility="protected" static="true" line="340">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="iconvEncoding" type="array" default="" visibility="protected" static="true" line="358"/>
  <member name="support" type="array" default="" visibility="private" static="true" line="784">
    <docblock>
      <description/>
      <var type="array"/>
    </docblock>
  </member>
  <constructor name="__construct" start="789" end="792" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="__construct()"/>
    </docblock>
  </constructor>
  <method name="access" start="802" end="807" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a single UTF-8 character from string."/>
      <param description="A UTF-8 string." type="string" variable="$str"/>
      <param description="The position of character to return." type="int" variable="$pos"/>
      <return description="Single Multi-Byte character." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="pos" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="Return the character at the specified position: $str[1] like functionality." line="804"/>
    </inline>
  </method>
  <method name="add_bom_to_string" start="818" end="825" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Prepends BOM character to the string and returns the whole string.">INFO: If BOM already existed there, the Input string is returned.</description>
      <param description="The input string" type="string" variable="$str"/>
      <return description="The output string that contains BOM" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="bom" start="832" end="835" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the Byte Order Mark Character."/>
      <return description="Byte Order Mark" type="string"/>
    </docblock>
  </method>
  <method name="callback" start="845" end="848" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description/>
      <alias value="of UTF8::chr_map()"/>
      <param variable="$callback"/>
      <param variable="$str"/>
      <return type="array"/>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="case_table" start="855" end="1855" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Returns an array of all lower and upper case UTF-8 encoded characters."/>
      <return description="An array with lower case chars as keys and upper chars as values." type="string"/>
    </docblock>
  </method>
  <method name="checkForSupport" start="1860" end="1869" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="check for UTF8-Support"/>
    </docblock>
  </method>
  <method name="chr" start="1878" end="1893" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Generates a UTF-8 encoded character from the given code point."/>
      <param description="The code point for which to generate a character." type="int" variable="$code_point"/>
      <return description="Multi-Byte character, returns empty string on failure to encode." type="string"/>
    </docblock>
    <parameter name="code_point" byreference="false" type="{unknown}"/>
  </method>
  <method name="chr_map" start="1904" end="1909" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Applies callback to all characters of a string."/>
      <param description="The callback function." type="string" variable="$callback"/>
      <param description="UTF-8 string to run callback on." type="string" variable="$str"/>
      <return description="The outcome of callback." type="array"/>
    </docblock>
    <parameter name="callback" byreference="false" type="{unknown}"/>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="chr_size_list" start="1923" end="1930" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Generates an array of byte length of each character of a Unicode string.">1 byte =&gt; U+0000  - U+007F
2 byte =&gt; U+0080  - U+07FF
3 byte =&gt; U+0800  - U+FFFF
4 byte =&gt; U+10000 - U+10FFFF</description>
      <param description="The original Unicode string." type="string" variable="$str"/>
      <return description="An array of byte lengths of each character." type="array"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="chr_to_decimal" start="1939" end="1970" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a decimal code representation of a specific character."/>
      <param description="The input character" type="string" variable="$chr"/>
      <return type="int"/>
    </docblock>
    <parameter name="chr" byreference="false" type="{unknown}"/>
  </method>
  <method name="chr_to_hex" start="1980" end="1983" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get hexadecimal code point (U+xxxx) of a UTF-8 encoded character."/>
      <param description="The input character" type="string" variable="$chr"/>
      <param type="string" variable="$pfix"/>
      <return description="The code point encoded as U+xxxx" type="string"/>
    </docblock>
    <parameter name="chr" byreference="false" type="{unknown}"/>
    <parameter name="pfix" byreference="false" type="string" default="'U+'"/>
  </method>
  <method name="chunk_split" start="1995" end="1998" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Splits a string into smaller chunks and multiple lines, using the specified line ending character."/>
      <param description="The original string to be split." type="string" variable="$body"/>
      <param description="The maximum character length of a chunk." type="int" variable="$chunklen"/>
      <param description="The character(s) to be inserted at the end of each chunk." type="string" variable="$end"/>
      <return description="The chunked string" type="string"/>
    </docblock>
    <parameter name="body" byreference="false" type="{unknown}"/>
    <parameter name="chunklen" byreference="false" type="integer" default="76"/>
    <parameter name="end" byreference="false" type="string" default="&quot;\r\n&quot;"/>
  </method>
  <method name="clean" start="2011" end="2045" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="accepts a string and removes all non-UTF-8 characters from it."/>
      <param description="The string to be sanitized." type="string" variable="$str"/>
      <param type="object" variable="$remove_bom">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <param type="object" variable="$normalize_whitespace">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <param description="e.g.: &quot;…&quot; =&gt; &quot;...&quot;" type="object" variable="$normalize_msword">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <param description="set true, to keep non-breaking-spaces" type="object" variable="$keep_non_breaking_space">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return description="Clean UTF-8 encoded string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="remove_bom" byreference="false" type="boolean" default="false"/>
    <parameter name="normalize_whitespace" byreference="false" type="boolean" default="false"/>
    <parameter name="normalize_msword" byreference="false" type="boolean" default="false"/>
    <parameter name="keep_non_breaking_space" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="http://stackoverflow.com/questions/1401317/remove-non-utf8-characters-from-string" line="2013"/>
      <comment value="caused connection reset problem on larger strings" line="2014"/>
    </inline>
  </method>
  <method name="cleanup" start="2054" end="2073" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clean-up a and show only printable UTF-8 chars at the end."/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="fixed ISO &lt;-&gt; UTF-8 Errors" line="2062"/>
      <comment value="remove all none UTF-8 symbols" line="2065"/>
      <comment value="&amp;&amp; remove diamond question mark (�)" line="2066"/>
      <comment value="&amp;&amp; remove remove invisible characters (e.g. &quot;\0&quot;)" line="2067"/>
      <comment value="&amp;&amp; remove BOM" line="2068"/>
      <comment value="&amp;&amp; normalize whitespace chars (but keep non-breaking-spaces)" line="2069"/>
    </inline>
  </method>
  <method name="codepoints" start="2084" end="2109" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Accepts a string and returns an array of Unicode code points."/>
      <param description="A UTF-8 encoded string or an array of such strings." type="mixed" variable="$arg"/>
      <param description="If True, will return code points in U+xxxx format," type="object" variable="$u_style">default, code points will be returned as integers.<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return description="The array of code points" type="array"/>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
    <parameter name="u_style" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="count_chars" start="2119" end="2126" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns count of characters used in a string."/>
      <param description="The input string." type="string" variable="$str"/>
      <return description="An associative array of Character as keys and" type="array">their count as values.</return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="decimal_to_chr" start="2135" end="2144" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a UTF-8 character from its decimal code representation."/>
      <param description="Code." type="int" variable="$code"/>
      <return type="string"/>
    </docblock>
    <parameter name="code" byreference="false" type="{unknown}"/>
  </method>
  <method name="encode" start="2159" end="2219" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="encode a string">INFO:  The different to "UTF8::utf8_encode()" is that this function, try to fix also broken / double encoding,
       so you can call this function also on a UTF-8 String and you don't mess the string.</description>
      <param description="e.g. 'UTF-8', 'ISO-8859-1', etc." type="string" variable="$encoding"/>
      <param description="the string" type="string" variable="$str"/>
      <param description="force the new encoding (we try to fix broken / double encoding for UTF-8)&lt;br /&gt;" type="object" variable="$force">otherwise we auto-detect the current string-encoding<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return type="string"/>
    </docblock>
    <parameter name="encoding" byreference="false" type="{unknown}"/>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="force" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="entityCallback" start="2228" end="2239" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Callback function for preg_replace_callback use."/>
      <param description="PREG matches" type="array" variable="$matches"/>
      <return type="string"/>
    </docblock>
    <parameter name="matches" byreference="false" type="{unknown}"/>
  </method>
  <method name="file_get_contents" start="2323" end="2360" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Reads entire file into a string.">WARNING: do not use UTF-8 Option fir binary-files (e.g.: images) !!!</description>
      <link value="http://php.net/manual/en/function.file-get-contents.php"/>
      <param description="&lt;p&gt;" type="string" variable="$filename">Name of the file to read.
                               &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$flags">Prior to PHP 6, this parameter is called
                               use_include_path and is a bool.
                               As of PHP 5 the FILE_USE_INCLUDE_PATH can be used
                               to trigger include path
                               search.
                               &lt;/p&gt;
                               &lt;p&gt;
                               The value of flags can be any combination of
                               the following flags (with some restrictions), joined with the
                               binary OR (|)
                               operator.
                               &lt;/p&gt;
                               &lt;p&gt;
                               &lt;table&gt;
                               Available flags
                               &lt;tr valign="top"&gt;
                               &lt;td&gt;Flag&lt;/td&gt;
                               &lt;td&gt;Description&lt;/td&gt;
                               &lt;/tr&gt;
                               &lt;tr valign="top"&gt;
                               &lt;td&gt;
                               FILE_USE_INCLUDE_PATH
                               &lt;/td&gt;
                               &lt;td&gt;
                               Search for filename in the include directory.
                               See include_path for more
                               information.
                               &lt;/td&gt;
                               &lt;/tr&gt;
                               &lt;tr valign="top"&gt;
                               &lt;td&gt;
                               FILE_TEXT
                               &lt;/td&gt;
                               &lt;td&gt;
                               As of PHP 6, the default encoding of the read
                               data is UTF-8. You can specify a different encoding by creating a
                               custom context or by changing the default using
                               stream_default_encoding. This flag cannot be
                               used with FILE_BINARY.
                               &lt;/td&gt;
                               &lt;/tr&gt;
                               &lt;tr valign="top"&gt;
                               &lt;td&gt;
                               FILE_BINARY
                               &lt;/td&gt;
                               &lt;td&gt;
                               With this flag, the file is read in binary mode. This is the default
                               setting and cannot be used with FILE_TEXT.
                               &lt;/td&gt;
                               &lt;/tr&gt;
                               &lt;/table&gt;
                               &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="resource" variable="$context">A valid context resource created with
                               stream_context_create. If you don't need to use a
                               custom context, you can skip this parameter by &amp;null;.
                               &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$offset">The offset where the reading starts.
                               &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$maxlen">Maximum length of data read. The default is to read until end
                               of file is reached.
                               &lt;/p&gt;</param>
      <param type="int" variable="$timeout"/>
      <param description="WARNING: maybe you can't use this option for images or pdf, because they used non" type="boolean" variable="$convertToUtf8">default utf-8 chars</param>
      <return description="The function returns the read data or false on failure." type="string"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="context" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="offset" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="maxlen" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="timeout" byreference="false" type="integer" default="10"/>
    <parameter name="convertToUtf8" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="init" line="2325"/>
      <comment value="return false on error" line="2346"/>
      <comment value="clean utf-8 string" line="2358"/>
    </inline>
  </method>
  <method name="file_has_bom" start="2369" end="2372" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if a file starts with BOM character."/>
      <param description="Path to a valid file." type="string" variable="$file_path"/>
      <return description="True if the file has BOM at the start, False otherwise." type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="file_path" byreference="false" type="{unknown}"/>
  </method>
  <method name="filter" start="2383" end="2425" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalizes to UTF-8 NFC, converting from WINDOWS-1252 when needed."/>
      <param type="mixed" variable="$var"/>
      <param type="int" variable="$normalization_form"/>
      <param type="string" variable="$leading_combining"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="normalization_form" byreference="false" type="integer" default="4"/>
    <parameter name="leading_combining" byreference="false" type="string" default="'◌'"/>
  </method>
  <method name="filter_input" start="2437" end="2446" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="&quot;filter_input()&quot;-wrapper with normalizes to UTF-8 NFC, converting from WINDOWS-1252 when needed."/>
      <param type="int" variable="$type"/>
      <param type="string" variable="$var"/>
      <param type="int" variable="$filter"/>
      <param type="mixed" variable="$option"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="{unknown}" default="" constant="FILTER_DEFAULT"/>
    <parameter name="option" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="filter_input_array" start="2457" end="2466" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="&quot;filter_input_array()&quot;-wrapper with normalizes to UTF-8 NFC, converting from WINDOWS-1252 when needed."/>
      <param type="int" variable="$type"/>
      <param type="mixed" variable="$definition"/>
      <param type="object" variable="$add_empty">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="definition" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="add_empty" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="filter_var" start="2477" end="2486" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="&quot;filter_var()&quot;-wrapper with normalizes to UTF-8 NFC, converting from WINDOWS-1252 when needed."/>
      <param type="mixed" variable="$var"/>
      <param type="int" variable="$filter"/>
      <param type="mixed" variable="$option"/>
      <return type="mixed"/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
    <parameter name="filter" byreference="false" type="{unknown}" default="" constant="FILTER_DEFAULT"/>
    <parameter name="option" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="filter_var_array" start="2497" end="2506" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="&quot;filter_var_array()&quot;-wrapper with normalizes to UTF-8 NFC, converting from WINDOWS-1252 when needed."/>
      <param type="array" variable="$data"/>
      <param type="mixed" variable="$definition"/>
      <param type="object" variable="$add_empty">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="mixed"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="definition" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="add_empty" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="fits_inside" start="2517" end="2520" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the number of Unicode characters in a string are not more than the specified integer."/>
      <param description="The original string to be checked." type="string" variable="$str"/>
      <param description="The size in number of chars to be checked against string." type="int" variable="$box_size"/>
      <return description="true if string is less than or equal to $box_size, false otherwise." type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="box_size" byreference="false" type="{unknown}"/>
  </method>
  <method name="fix_simple_utf8" start="2529" end="2546" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Fixing a broken UTF-8 string."/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="fix_utf8" start="2555" end="2574" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Fix a double (or multiple) encoded UTF8 string."/>
      <param type="object" variable="$str">
        <type full="voku\helper\array|string" namespace="voku\helper" name="array|string"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="getCharDirection" start="2583" end="2674" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get character of a specific character."/>
      <param description="Character." type="string" variable="$chr"/>
      <return description="'RTL' or 'LTR'" type="string"/>
    </docblock>
    <parameter name="chr" byreference="false" type="{unknown}"/>
  </method>
  <method name="getData" start="2683" end="2692" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="get data from &quot;/data/*.ser&quot;"/>
      <param type="string" variable="$file"/>
      <return description="false on error" type="object">
        <type full="voku\helper\bool|string|array|int" namespace="voku\helper" name="bool|string|array|int"/>
      </return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="hash" start="2701" end="2740" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Creates a random string of UTF-8 characters."/>
      <param description="The length of string in characters." type="int" variable="$len"/>
      <return description="String consisting of random characters." type="string"/>
    </docblock>
    <parameter name="len" byreference="false" type="integer" default="8"/>
    <inline>
      <comment value="init" line="2710"/>
    </inline>
  </method>
  <method name="hex_to_int" start="2751" end="2758" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts hexadecimal U+xxxx code point representation to Integer.">INFO: opposite to UTF8::int_to_hex( )</description>
      <param description="The hexadecimal code point representation." type="string" variable="$str"/>
      <return description="The code point, or 0 on failure." type="int"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="html_encode" start="2769" end="2780" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts a UTF-8 string to a series of HTML numbered entities.">e.g.: &amp;#123;&amp;#39;&amp;#1740;</description>
      <param description="The Unicode string to be encoded as numbered entities." type="string" variable="$str"/>
      <return description="HTML numbered entities." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="html_entity_decode" start="2851" end="2886" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="UTF-8 version of html_entity_decode()">The reason we are not using html_entity_decode() by itself is because
while it is not technically correct to leave out the semicolon
at the end of an entity most browsers will still interpret the entity
correctly. html_entity_decode() does not convert entities without
semicolons, so we are left with our own little solution here. Bummer.

Convert all HTML entities to their applicable characters</description>
      <link value="http://php.net/manual/en/function.html-entity-decode.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The input string.
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$flags">A bitmask of one or more of the following flags, which specify how to handle quotes and
                        which document type to use. The default is ENT_COMPAT | ENT_HTML401.
                        &lt;table&gt;
                        Available &lt;i&gt;flags&lt;/i&gt; constants
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;Constant Name&lt;/td&gt;
                        &lt;td&gt;Description&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_COMPAT&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;Will convert double-quotes and leave single-quotes alone.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_QUOTES&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;Will convert both double and single quotes.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_NOQUOTES&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;Will leave both double and single quotes unconverted.&lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_HTML401&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;
                        Handle code as HTML 4.01.
                        &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_XML1&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;
                        Handle code as XML 1.
                        &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_XHTML&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;
                        Handle code as XHTML.
                        &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;tr valign="top"&gt;
                        &lt;td&gt;&lt;b&gt;ENT_HTML5&lt;/b&gt;&lt;/td&gt;
                        &lt;td&gt;
                        Handle code as HTML 5.
                        &lt;/td&gt;
                        &lt;/tr&gt;
                        &lt;/table&gt;
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$encoding">Encoding to use.
                        &lt;/p&gt;</param>
      <return description="the decoded string." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="htmlentities" start="2991" end="2994" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert all applicable characters to HTML entities: UTF-8 version of htmlentities()"/>
      <link value="http://php.net/manual/en/function.htmlentities.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The input string.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$flags">A bitmask of one or more of the following flags, which specify how to handle quotes,
                             invalid code unit sequences and the used document type. The default is
                             ENT_COMPAT | ENT_HTML401.
                             &lt;table&gt;
                             Available &lt;i&gt;flags&lt;/i&gt; constants
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;Constant Name&lt;/td&gt;
                             &lt;td&gt;Description&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_COMPAT&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will convert double-quotes and leave single-quotes alone.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_QUOTES&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will convert both double and single quotes.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_NOQUOTES&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will leave both double and single quotes unconverted.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_IGNORE&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Silently discard invalid code unit sequences instead of returning
                             an empty string. Using this flag is discouraged as it
                             may have security implications.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_SUBSTITUTE&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Replace invalid code unit sequences with a Unicode Replacement Character
                             U+FFFD (UTF-8) or &amp;#38;#38;#FFFD; (otherwise) instead of returning an empty string.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_DISALLOWED&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Replace invalid code points for the given document type with a
                             Unicode Replacement Character U+FFFD (UTF-8) or &amp;#38;#38;#FFFD;
                             (otherwise) instead of leaving them as is. This may be useful, for
                             instance, to ensure the well-formedness of XML documents with
                             embedded external content.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_HTML401&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as HTML 4.01.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_XML1&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as XML 1.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_XHTML&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as XHTML.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_HTML5&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as HTML 5.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;/table&gt;
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$encoding">Like &lt;b&gt;htmlspecialchars&lt;/b&gt;,
                             &lt;b&gt;htmlentities&lt;/b&gt; takes an optional third argument
                             &lt;i&gt;encoding&lt;/i&gt; which defines encoding used in
                             conversion.
                             Although this argument is technically optional, you are highly
                             encouraged to specify the correct value for your code.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$double_encode">When &lt;i&gt;double_encode&lt;/i&gt; is turned off PHP will not
                             encode existing html entities. The default is to convert everything.
                             &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return description="the encoded string." type="string">&lt;/p&gt;
&lt;p&gt;
If the input &lt;i&gt;string&lt;/i&gt; contains an invalid code unit
sequence within the given &lt;i&gt;encoding&lt;/i&gt; an empty string
will be returned, unless either the &lt;b&gt;ENT_IGNORE&lt;/b&gt; or
&lt;b&gt;ENT_SUBSTITUTE&lt;/b&gt; flags are set.</return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="double_encode" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="htmlspecialchars" start="3103" end="3106" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert special characters to HTML entities: UTF-8 version of htmlspecialchars()"/>
      <link value="http://php.net/manual/en/function.htmlspecialchars.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The string being converted.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$flags">A bitmask of one or more of the following flags, which specify how to handle quotes,
                             invalid code unit sequences and the used document type. The default is
                             ENT_COMPAT | ENT_HTML401.
                             &lt;table&gt;
                             Available &lt;i&gt;flags&lt;/i&gt; constants
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;Constant Name&lt;/td&gt;
                             &lt;td&gt;Description&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_COMPAT&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will convert double-quotes and leave single-quotes alone.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_QUOTES&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will convert both double and single quotes.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_NOQUOTES&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;Will leave both double and single quotes unconverted.&lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_IGNORE&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Silently discard invalid code unit sequences instead of returning
                             an empty string. Using this flag is discouraged as it
                             may have security implications.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_SUBSTITUTE&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Replace invalid code unit sequences with a Unicode Replacement Character
                             U+FFFD (UTF-8) or &amp;#38;#38;#FFFD; (otherwise) instead of returning an empty string.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_DISALLOWED&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Replace invalid code points for the given document type with a
                             Unicode Replacement Character U+FFFD (UTF-8) or &amp;#38;#38;#FFFD;
                             (otherwise) instead of leaving them as is. This may be useful, for
                             instance, to ensure the well-formedness of XML documents with
                             embedded external content.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_HTML401&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as HTML 4.01.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_XML1&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as XML 1.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_XHTML&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as XHTML.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;tr valign="top"&gt;
                             &lt;td&gt;&lt;b&gt;ENT_HTML5&lt;/b&gt;&lt;/td&gt;
                             &lt;td&gt;
                             Handle code as HTML 5.
                             &lt;/td&gt;
                             &lt;/tr&gt;
                             &lt;/table&gt;
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$encoding">Defines encoding used in conversion.
                             &lt;/p&gt;
                             &lt;p&gt;
                             For the purposes of this function, the encodings
                             ISO-8859-1, ISO-8859-15,
                             UTF-8, cp866,
                             cp1251, cp1252, and
                             KOI8-R are effectively equivalent, provided the
                             &lt;i&gt;string&lt;/i&gt; itself is valid for the encoding, as
                             the characters affected by &lt;b&gt;htmlspecialchars&lt;/b&gt; occupy
                             the same positions in all of these encodings.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$double_encode">When &lt;i&gt;double_encode&lt;/i&gt; is turned off PHP will not
                             encode existing html entities, the default is to convert everything.
                             &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return description="The converted string." type="string">&lt;/p&gt;
&lt;p&gt;
If the input &lt;i&gt;string&lt;/i&gt; contains an invalid code unit
sequence within the given &lt;i&gt;encoding&lt;/i&gt; an empty string
will be returned, unless either the &lt;b&gt;ENT_IGNORE&lt;/b&gt; or
&lt;b&gt;ENT_SUBSTITUTE&lt;/b&gt; flags are set.</return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="flags" byreference="false" type="{unknown}" default="" constant="ENT_COMPAT"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="double_encode" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="iconv_loaded" start="3113" end="3116" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="checks whether iconv is available on the server"/>
      <return description="True if available, False otherwise" type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="int_to_hex" start="3126" end="3137" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts Integer to hexadecimal U+xxxx code point representation."/>
      <param description="The integer to be converted to hexadecimal code point." type="int" variable="$int"/>
      <param type="string" variable="$pfix"/>
      <return description="The code point, or empty string on failure." type="string"/>
    </docblock>
    <parameter name="int" byreference="false" type="{unknown}"/>
    <parameter name="pfix" byreference="false" type="string" default="'U+'"/>
  </method>
  <method name="intl_loaded" start="3144" end="3147" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="checks whether intl is available on the server"/>
      <return description="True if available, False otherwise" type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="isAscii" start="3156" end="3159" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::is_ascii()&quot;"/>
      <param type="string" variable="$str"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="isBase64" start="3168" end="3171" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::is_base64&quot;"/>
      <param type="string" variable="$str"/>
      <return type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="isBom" start="3180" end="3183" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::is_bom&quot;"/>
      <param type="string" variable="$utf8_chr"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="utf8_chr" byreference="false" type="{unknown}"/>
  </method>
  <method name="isJson" start="3194" end="3211" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Try to check if a string is a json-string..."/>
      <param variable="$str"/>
      <return type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
      <deprecated/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="isUtf8" start="3220" end="3223" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::is_utf8&quot;"/>
      <param type="string" variable="$str"/>
      <return type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_ascii" start="3233" end="3236" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if a string is 7 bit ASCII."/>
      <param description="The string to check." type="string" variable="$str"/>
      <return description="&lt;strong&gt;true&lt;/strong&gt; if it is ASCII&lt;br /&gt;" type="object">&lt;strong&gt;false&lt;/strong&gt; otherwise<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_base64" start="3245" end="3258" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns true if the string is base64 encoded, false otherwise."/>
      <param type="string" variable="$str"/>
      <return description="Whether or not $str is base64 encoded" type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_binary" start="3267" end="3283" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Check if the input is binary... (is look like a hack)"/>
      <param type="string" variable="$input"/>
      <return type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_binary_file" start="3292" end="3303" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Check if the file is binary."/>
      <param type="string" variable="$file"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_bom" start="3314" end="3317" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if the given string is exactly &quot;UTF8 - Byte Order Mark&quot;.">WARNING: Use "UTF8::string_has_bom()" if you will check BOM in a string.</description>
      <param description="The input string." type="string" variable="$utf8_chr"/>
      <return description="True if the $utf8_chr is Byte Order Mark, False otherwise." type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="utf8_chr" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_utf16" start="3326" end="3372" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Check if the string is UTF-16."/>
      <param type="string" variable="$str"/>
      <return description="false if is't not UTF16, 1 for UTF-16LE, 2 for UTF-16BE." type="object">
        <type full="voku\helper\int|false" namespace="voku\helper" name="int|false"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_utf32" start="3381" end="3427" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Check if the string is UTF-32."/>
      <param type="string" variable="$str"/>
      <return description="false if is't not UTF16, 1 for UTF-32LE, 2 for UTF-32BE." type="object">
        <type full="voku\helper\int|false" namespace="voku\helper" name="int|false"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="is_utf8" start="3438" end="3561" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks whether the passed string contains only byte sequences that appear valid UTF-8 characters."/>
      <see value="http://hsivonen.iki.fi/php-utf8/"/>
      <param description="The string to be checked." type="string" variable="$str"/>
      <return type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="json_decode" start="3599" end="3610" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="(PHP 5 &amp;gt;= 5.2.0, PECL json &amp;gt;= 1.2.0)&lt;br/&gt; Decodes a JSON string"/>
      <link value="http://php.net/manual/en/function.json-decode.php"/>
      <param description="&lt;p&gt;" type="string" variable="$json">The &lt;i&gt;json&lt;/i&gt; string being decoded.
                       &lt;/p&gt;
                       &lt;p&gt;
                       This function only works with UTF-8 encoded strings.
                       &lt;/p&gt;
                       &lt;p&gt;PHP implements a superset of
                       JSON - it will also encode and decode scalar types and &lt;b&gt;NULL&lt;/b&gt;. The JSON standard
                       only supports these values when they are nested inside an array or an object.
                       &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$assoc">When &lt;b&gt;TRUE&lt;/b&gt;, returned objects will be converted into
                       associative arrays.
                       &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$depth">User specified recursion depth.
                       &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$options">Bitmask of JSON decode options. Currently only
                       &lt;b&gt;JSON_BIGINT_AS_STRING&lt;/b&gt;
                       is supported (default is to cast large integers as floats)
                       &lt;/p&gt;</param>
      <return description="the value encoded in &lt;i&gt;json&lt;/i&gt; in appropriate" type="mixed">PHP type. Values true, false and
null (case-insensitive) are returned as &lt;b&gt;TRUE&lt;/b&gt;, &lt;b&gt;FALSE&lt;/b&gt;
and &lt;b&gt;NULL&lt;/b&gt; respectively. &lt;b&gt;NULL&lt;/b&gt; is returned if the
&lt;i&gt;json&lt;/i&gt; cannot be decoded or if the encoded
data is deeper than the recursion limit.</return>
    </docblock>
    <parameter name="json" byreference="false" type="{unknown}"/>
    <parameter name="assoc" byreference="false" type="boolean" default="false"/>
    <parameter name="depth" byreference="false" type="integer" default="512"/>
    <parameter name="options" byreference="false" type="integer" default="0"/>
  </method>
  <method name="json_encode" start="3648" end="3659" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="(PHP 5 &amp;gt;= 5.2.0, PECL json &amp;gt;= 1.2.0)&lt;br/&gt; Returns the JSON representation of a value"/>
      <link value="http://php.net/manual/en/function.json-encode.php"/>
      <param description="&lt;p&gt;" type="mixed" variable="$value">The &lt;i&gt;value&lt;/i&gt; being encoded. Can be any type except
                      a resource.
                      &lt;/p&gt;
                      &lt;p&gt;
                      All string data must be UTF-8 encoded.
                      &lt;/p&gt;
                      &lt;p&gt;PHP implements a superset of
                      JSON - it will also encode and decode scalar types and &lt;b&gt;NULL&lt;/b&gt;. The JSON standard
                      only supports these values when they are nested inside an array or an object.
                      &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$options">Bitmask consisting of &lt;b&gt;JSON_HEX_QUOT&lt;/b&gt;,
                      &lt;b&gt;JSON_HEX_TAG&lt;/b&gt;,
                      &lt;b&gt;JSON_HEX_AMP&lt;/b&gt;,
                      &lt;b&gt;JSON_HEX_APOS&lt;/b&gt;,
                      &lt;b&gt;JSON_NUMERIC_CHECK&lt;/b&gt;,
                      &lt;b&gt;JSON_PRETTY_PRINT&lt;/b&gt;,
                      &lt;b&gt;JSON_UNESCAPED_SLASHES&lt;/b&gt;,
                      &lt;b&gt;JSON_FORCE_OBJECT&lt;/b&gt;,
                      &lt;b&gt;JSON_UNESCAPED_UNICODE&lt;/b&gt;. The behaviour of these
                      constants is described on
                      the JSON constants page.
                      &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$depth">Set the maximum depth. Must be greater than zero.
                      &lt;/p&gt;</param>
      <return description="a JSON encoded string on success or &lt;b&gt;FALSE&lt;/b&gt; on failure." type="string"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="integer" default="0"/>
    <parameter name="depth" byreference="false" type="integer" default="512"/>
  </method>
  <method name="lcfirst" start="3668" end="3671" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Makes string's first char lowercase."/>
      <param description="The input string" type="string" variable="$str"/>
      <return description="The resulting string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="ltrim" start="3683" end="3694" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Strip whitespace or other characters from beginning of a UTF-8 string.">WARNING: This is much slower then "ltrim()" !!!!</description>
      <param description="The string to be trimmed" type="string" variable="$str"/>
      <param description="Optional characters to be stripped" type="string" variable="$chars"/>
      <return description="The string with unwanted characters stripped from the left" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="string" default="''"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="INF"/>
  </method>
  <method name="max" start="3703" end="3710" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the UTF-8 character with the maximum code point in the given data."/>
      <param description="A UTF-8 encoded string or an array of such strings." type="mixed" variable="$arg"/>
      <return description="The character with the highest code point than others." type="string"/>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
  </method>
  <method name="max_chr_width" start="3720" end="3728" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Calculates and returns the maximum number of bytes taken by any UTF-8 encoded character in the given string."/>
      <param description="The original Unicode string." type="string" variable="$str"/>
      <return description="An array of byte lengths of each character." type="int"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="mbstring_loaded" start="3735" end="3744" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="checks whether mbstring is available on the server"/>
      <return description="True if available, False otherwise" type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
  </method>
  <method name="min" start="3753" end="3760" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns the UTF-8 character with the minimum code point in the given data."/>
      <param description="A UTF-8 encoded string or an array of such strings." type="mixed" variable="$arg"/>
      <return description="The character with the lowest code point than others." type="string"/>
    </docblock>
    <parameter name="arg" byreference="false" type="{unknown}"/>
  </method>
  <method name="normalizeEncoding" start="3769" end="3815" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalize the encoding-name input."/>
      <param description="e.g.: ISO, UTF8, WINDOWS-1251 etc." type="string" variable="$encoding"/>
      <return description="e.g.: ISO-8859-1, UTF-8, ISO-8859-5 etc." type="string"/>
    </docblock>
    <parameter name="encoding" byreference="false" type="{unknown}"/>
  </method>
  <method name="normalize_msword" start="3824" end="3835" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalize MS Word special characters."/>
      <param description="The string to be normalized." type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="normalize_whitespace" start="3846" end="3874" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Normalize the whitespace."/>
      <param description="The string to be normalized." type="string" variable="$str"/>
      <param description="Set to true, to keep non-breaking-spaces." type="object" variable="$keepNonBreakingSpace">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <param description="Set to true, to keep non-printable (for the web) bidirectional text chars." type="object" variable="$keepBidiUnicodeControls">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="keepNonBreakingSpace" byreference="false" type="boolean" default="false"/>
    <parameter name="keepBidiUnicodeControls" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="number_format" start="3886" end="3910" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Format a number with grouped thousands."/>
      <param type="float" variable="$number"/>
      <param type="int" variable="$decimals"/>
      <param type="string" variable="$dec_point"/>
      <param type="string" variable="$thousands_sep"/>
      <return type="string"/>
    </docblock>
    <parameter name="number" byreference="false" type="{unknown}"/>
    <parameter name="decimals" byreference="false" type="integer" default="0"/>
    <parameter name="dec_point" byreference="false" type="string" default="'.'"/>
    <parameter name="thousands_sep" byreference="false" type="string" default="','"/>
  </method>
  <method name="ord" start="3920" end="3942" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Calculates Unicode code point of the given UTF-8 encoded character."/>
      <param description="The character of which to calculate code point." type="string" variable="$s"/>
      <return description="Unicode code point of the given character,&lt;br /&gt;" type="int">0 on invalid UTF-8 byte sequence.</return>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
  </method>
  <method name="parse_str" start="3962" end="3970" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Parses the string into variables.">WARNING: This differs from parse_str() by returning the results
   instead of placing them in the local scope!</description>
      <link value="http://php.net/manual/en/function.parse-str.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The input string.
                       &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="array" variable="$result">If the second parameter arr is present,
                       variables are stored in this variable as array elements instead.
                       &lt;/p&gt;</param>
      <return type="object">
        <type full="voku\helper\void" namespace="voku\helper" name="void"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="result" byreference="true" type="{unknown}"/>
    <inline>
      <comment value="init" line="3964"/>
    </inline>
  </method>
  <method name="pcre_utf8_support" start="3977" end="3981" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="checks if \u modifier is available that enables Unicode support in PCRE."/>
      <return description="True if support is available, false otherwise" type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <inline>
      <comment value="@noinspection PhpUsageOfSilenceOperatorInspection" line="3979"/>
    </inline>
  </method>
  <method name="range" start="3991" end="4028" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create an array containing a range of UTF-8 characters."/>
      <param description="Numeric or hexadecimal code points, or a UTF-8 character to start from." type="mixed" variable="$var1"/>
      <param description="Numeric or hexadecimal code points, or a UTF-8 character to end at." type="mixed" variable="$var2"/>
      <return type="array"/>
    </docblock>
    <parameter name="var1" byreference="false" type="{unknown}"/>
    <parameter name="var2" byreference="false" type="{unknown}"/>
  </method>
  <method name="removeBOM" start="4037" end="4060" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Remove the BOM from UTF-8 / UTF-16 / UTF-32 strings."/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="INFO: https://en.wikipedia.org/wiki/Byte_order_mark" line="4039"/>
    </inline>
  </method>
  <method name="remove_duplicates" start="4070" end="4083" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Removes duplicate occurrences of a string in another string."/>
      <param description="The base string" type="string" variable="$str"/>
      <param description="String to search for in the base string" type="object" variable="$what">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <return description="The result string with removed duplicates" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="what" byreference="false" type="string" default="' '"/>
  </method>
  <method name="remove_invisible_characters" start="4098" end="4117" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Remove Invisible Characters">This prevents sandwiching null characters
between ascii characters, like Java\0script.

copy&amp;past from https://github.com/bcit-ci/CodeIgniter/blob/develop/system/core/Common.php</description>
      <param type="string" variable="$str"/>
      <param type="object" variable="$url_encoded">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="url_encoded" byreference="false" type="boolean" default="true"/>
    <inline>
      <comment value="init" line="4100"/>
      <comment value="every control character except newline (dec 10)," line="4103"/>
      <comment value="carriage return (dec 13) and horizontal tab (dec 09)" line="4104"/>
      <comment value="00-08, 11, 12, 14-31, 127" line="4110"/>
    </inline>
  </method>
  <method name="replace_diamond_question_mark" start="4127" end="4140" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="replace diamond question mark (�)"/>
      <param type="string" variable="$str"/>
      <param type="string" variable="$unknown"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="unknown" byreference="false" type="string" default="'?'"/>
  </method>
  <method name="rtrim" start="4152" end="4163" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Strip whitespace or other characters from end of a UTF-8 string.">WARNING: This is much slower then "rtrim()" !!!!</description>
      <param description="The string to be trimmed" type="string" variable="$str"/>
      <param description="Optional characters to be stripped" type="string" variable="$chars"/>
      <return description="The string with unwanted characters stripped from the right" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="string" default="''"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="INF"/>
  </method>
  <method name="rxClass" start="4173" end="4209" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="rxClass"/>
      <param type="string" variable="$s"/>
      <param type="string" variable="$class"/>
      <return type="string"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
    <parameter name="class" byreference="false" type="string" default="''"/>
    <inline>
      <comment value="@noinspection SuspiciousLoopInspection" line="4185"/>
    </inline>
  </method>
  <method name="showSupport" start="4214" end="4219" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Echo native UTF8-Support libs, e.g. for debugging."/>
    </docblock>
  </method>
  <method name="single_chr_html_encode" start="4228" end="4235" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Converts a UTF-8 character to HTML Numbered Entity like &quot;&amp;#123;&quot;."/>
      <param description="The Unicode character to be encoded as numbered entity." type="string" variable="$chr"/>
      <return description="The HTML numbered entity." type="string"/>
    </docblock>
    <parameter name="chr" byreference="false" type="{unknown}"/>
  </method>
  <method name="split" start="4246" end="4314" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a string to an array of Unicode characters."/>
      <param description="The string to split into array." type="string" variable="$str"/>
      <param description="Max character length of each array element." type="int" variable="$length"/>
      <param description="Clean non UTF-8 chars from the string." type="boolean" variable="$cleanUtf8"/>
      <return description="An array containing chunks of the string." type="array"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="integer" default="1"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="4254"/>
    </inline>
  </method>
  <method name="str_detect_encoding" start="4324" end="4392" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Optimized &quot;\mb_detect_encoding()&quot;-function -&gt; with support for UTF-16 and UTF-32."/>
      <param type="string" variable="$str"/>
      <return description="The detected string-encoding e.g. UTF-8 or UTF-16BE,&lt;br /&gt;" type="object">otherwise it will return false.<type full="voku\helper\false|string" namespace="voku\helper" name="false|string"/></return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="1.) check binary strings (010001001...) like UTF-16 / UTF-32" line="4328"/>
      <comment value="2.) simple check for ASCII chars" line="4344"/>
      <comment value="3.) simple check for UTF-8 chars" line="4352"/>
      <comment value="4.) check via &quot;\mb_detect_encoding()&quot;" line="4360"/>
      <comment value="INFO: UTF-16, UTF-32, UCS2 and UCS4, encoding detection will fail always with &quot;\mb_detect_encoding()&quot;" line="4362"/>
      <comment value="5.) check via &quot;iconv()&quot;" line="4379"/>
    </inline>
  </method>
  <method name="str_ireplace" start="4420" end="4437" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Case-insensitive and UTF-8 safe version of &lt;function&gt;str_replace&lt;/function&gt;."/>
      <link value="http://php.net/manual/en/function.str-ireplace.php"/>
      <param description="&lt;p&gt;" type="mixed" variable="$search">Every replacement with search array is
                      performed on the result of previous replacement.
                      &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="mixed" variable="$replace">&lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="mixed" variable="$subject">If subject is an array, then the search and
                      replace is performed with every entry of
                      subject, and the return value is an array as
                      well.
                      &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$count">The number of matched and replaced needles will
                      be returned in count which is passed by
                      reference.
                      &lt;/p&gt;</param>
      <return description="a string or an array of replacements." type="mixed"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="search" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}"/>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="true" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="@noinspection AlterInForeachInspection" line="4424"/>
    </inline>
  </method>
  <method name="str_limit_after_word" start="4448" end="4478" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Limit the number of characters in a string, but also after the next word."/>
      <param type="string" variable="$str"/>
      <param type="int" variable="$length"/>
      <param type="string" variable="$strAddOn"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="integer" default="100"/>
    <parameter name="strAddOn" byreference="false" type="string" default="'...'"/>
  </method>
  <method name="str_pad" start="4490" end="4524" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Pad a UTF-8 string to given length with another string."/>
      <param description="The input string" type="string" variable="$input"/>
      <param description="The length of return string" type="int" variable="$pad_length"/>
      <param description="String to use for padding the input string" type="string" variable="$pad_string"/>
      <param description="can be STR_PAD_RIGHT, STR_PAD_LEFT or STR_PAD_BOTH" type="int" variable="$pad_type"/>
      <return description="Returns the padded string" type="string"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="pad_length" byreference="false" type="{unknown}"/>
    <parameter name="pad_string" byreference="false" type="string" default="' '"/>
    <parameter name="pad_type" byreference="false" type="{unknown}" default="" constant="STR_PAD_RIGHT"/>
  </method>
  <method name="str_repeat" start="4544" end="4549" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Repeat a string."/>
      <param description="&lt;p&gt;" type="string" variable="$input">The string to be repeated.
                          &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="int" variable="$multiplier">Number of time the input string should be
                          repeated.
                          &lt;/p&gt;
                          &lt;p&gt;
                          multiplier has to be greater than or equal to 0.
                          If the multiplier is set to 0, the function
                          will return an empty string.
                          &lt;/p&gt;</param>
      <return description="the repeated string." type="string"/>
    </docblock>
    <parameter name="input" byreference="false" type="{unknown}"/>
    <parameter name="multiplier" byreference="false" type="{unknown}"/>
  </method>
  <method name="str_replace" start="4581" end="4584" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="INFO: this is only a wrapper for &quot;str_replace()&quot;  -&gt; the original functions is already UTF-8 safe">(PHP 4, PHP 5)&lt;br/&gt;
Replace all occurrences of the search string with the replacement string</description>
      <link value="http://php.net/manual/en/function.str-replace.php"/>
      <param description="&lt;p&gt;" type="mixed" variable="$search">The value being searched for, otherwise known as the needle.
                      An array may be used to designate multiple needles.
                      &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="mixed" variable="$replace">The replacement value that replaces found search
                      values. An array may be used to designate multiple replacements.
                      &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="mixed" variable="$subject">The string or array being searched and replaced on,
                      otherwise known as the haystack.
                      &lt;/p&gt;
                      &lt;p&gt;
                      If subject is an array, then the search and
                      replace is performed with every entry of
                      subject, and the return value is an array as
                      well.
                      &lt;/p&gt;</param>
      <param description="[optional] If passed, this will hold the number of matched and replaced needles." type="int" variable="$count"/>
      <return description="This function returns a string or an array with the replaced values." type="mixed"/>
    </docblock>
    <parameter name="search" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}"/>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <parameter name="count" byreference="true" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="str_shuffle" start="4593" end="4600" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Shuffles all the characters in the string."/>
      <param description="The input string" type="string" variable="$str"/>
      <return description="The shuffled string." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="str_sort" start="4611" end="4626" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Sort all characters according to code points."/>
      <param description="A UTF-8 string." type="string" variable="$str"/>
      <param description="Sort unique. If true, repeated characters are ignored." type="object" variable="$unique">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <param description="If true, will sort characters in reverse code point order." type="object" variable="$desc">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return description="String of sorted characters" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="unique" byreference="false" type="boolean" default="false"/>
    <parameter name="desc" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="str_split" start="4636" end="4675" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Convert a string to an array."/>
      <param type="string" variable="$str"/>
      <param type="int" variable="$len"/>
      <return type="array"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="len" byreference="false" type="integer" default="1"/>
    <inline>
      <comment value="init" line="4638"/>
      <comment value="@noinspection PhpForeachArrayIsUsedAsValueInspection" line="4665"/>
    </inline>
  </method>
  <method name="str_to_binary" start="4684" end="4702" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get a binary representation of a specific character."/>
      <param description="The input character." type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="init" line="4692"/>
      <comment value="@noinspection ForeachInvariantsInspection" line="4696"/>
    </inline>
  </method>
  <method name="str_transliterate" start="4722" end="4813" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="US-ASCII transliterations of Unicode text.">Ported Sean M. Burke's Text::Unidecode Perl module (He did all the hard work!)
Warning: you should only pass this well formed UTF-8!
Be aware it works by making a copy of the input string which it appends transliterated
characters to - it uses a PHP output buffer to do this - it means, memory use will increase,
requiring up to the same amount again as the input string</description>
      <see value="http://search.cpan.org/~sburke/Text-Unidecode-0.04/lib/Text/Unidecode.pm"/>
      <author value="&lt;hsivonen@iki.fi&gt;"/>
      <param description="UTF-8 string to convert" type="string" variable="$str"/>
      <param description="Character use if character unknown. (default is ?)" type="string" variable="$unknown"/>
      <return description="US-ASCII string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="unknown" byreference="false" type="string" default="'?'"/>
  </method>
  <method name="str_word_count" start="4826" end="4858" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Counts number of words in the UTF-8 string."/>
      <param description="The input string." type="string" variable="$str"/>
      <param description="&lt;strong&gt;0&lt;/strong&gt; =&gt; return a number of words&lt;br /&gt;" type="int" variable="$format">&lt;strong&gt;1&lt;/strong&gt; =&gt; return an array of words
                   &lt;strong&gt;2&lt;/strong&gt; =&gt; return an array of words with word-offset as key</param>
      <param type="string" variable="$charlist"/>
      <return description="The number of words in the string" type="object">
        <type full="voku\helper\array|float" namespace="voku\helper" name="array|float"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="format" byreference="false" type="integer" default="0"/>
    <parameter name="charlist" byreference="false" type="string" default="''"/>
  </method>
  <method name="strcasecmp" start="4868" end="4871" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Case-insensitive string comparison."/>
      <param type="string" variable="$str1"/>
      <param type="string" variable="$str2"/>
      <return description="Returns &lt; 0 if str1 is less than str2; &gt; 0 if str1 is greater than str2, and 0 if they are equal." type="int"/>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
  </method>
  <method name="strcmp" start="4883" end="4889" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="String comparison."/>
      <param type="string" variable="$str1"/>
      <param type="string" variable="$str2"/>
      <return description="&lt;strong&gt;&lt; 0&lt;/strong&gt; if str1 is less than str2&lt;br /&gt;" type="int">&lt;strong&gt;&gt; 0&lt;/strong&gt; if str1 is greater than str2&lt;br /&gt;
             &lt;strong&gt;0&lt;/strong&gt; if they are equal.</return>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
  </method>
  <method name="strcspn" start="4901" end="4919" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Find length of initial segment not matching mask."/>
      <param type="string" variable="$str"/>
      <param type="string" variable="$charList"/>
      <param type="int" variable="$offset"/>
      <param type="int" variable="$length"/>
      <return type="object">
        <type full="voku\helper\int|null" namespace="voku\helper" name="int|null"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="charList" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="length" byreference="false" type="integer" default="2147483647"/>
  </method>
  <method name="string" start="4928" end="4939" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Makes a UTF-8 string from code points."/>
      <param description="Integer or Hexadecimal codepoints" type="array" variable="$array"/>
      <return description="UTF-8 encoded string" type="string"/>
    </docblock>
    <parameter name="array" byreference="false" type="{unknown}"/>
  </method>
  <method name="string_has_bom" start="4948" end="4951" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Checks if string starts with &quot;UTF-8 BOM&quot; character."/>
      <param description="The input string." type="string" variable="$str"/>
      <return description="True if the string has BOM at the start, False otherwise." type="object">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="strip_tags" start="4972" end="4978" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Strip HTML and PHP tags from a string."/>
      <link value="http://php.net/manual/en/function.strip-tags.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The input string.
                              &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$allowable_tags">You can use the optional second parameter to specify tags which should
                              not be stripped.
                              &lt;/p&gt;
                              &lt;p&gt;
                              HTML comments and PHP tags are also stripped. This is hardcoded and
                              can not be changed with allowable_tags.
                              &lt;/p&gt;</param>
      <return description="the stripped string." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="allowable_tags" byreference="false" type="{unknown}" default="" constant="null"/>
    <inline>
      <comment value="clean broken utf8" line="4974"/>
    </inline>
  </method>
  <method name="stripos" start="5003" end="5026" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Finds position of first occurrence of a string within another, case insensitive."/>
      <link value="http://php.net/manual/en/function.mb-stripos.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string from which to get the position of the first occurrence
                          of needle
                          &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The string to find in haystack
                          &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$offset">The position in haystack
                          to start searching
                          &lt;/p&gt;</param>
      <param type="string" variable="$encoding"/>
      <param description="Clean non UTF-8 chars from the string" type="boolean" variable="$cleanUtf8"/>
      <return description="Return the numeric position of the first occurrence of" type="int">needle in the haystack
string, or false if needle is not found.</return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5012"/>
      <comment value="INFO: this is only a fallback for old versions" line="5020"/>
    </inline>
  </method>
  <method name="stristr" start="5037" end="5047" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns all of haystack starting from and including the first occurrence of needle to the end."/>
      <param type="string" variable="$str"/>
      <param type="string" variable="$needle"/>
      <param type="object" variable="$before_needle">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="object">
        <type full="voku\helper\false|string" namespace="voku\helper" name="false|string"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="before_needle" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5043"/>
    </inline>
  </method>
  <method name="strlen" start="5063" end="5084" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the string length, not the byte-length!"/>
      <link value="http://php.net/manual/en/function.mb-strlen.php"/>
      <param description="The string being checked for length." type="string" variable="$str"/>
      <param description="Set the charset for e.g. &quot;\mb_&quot; function" type="string" variable="$encoding"/>
      <param description="Clean non UTF-8 chars from the string" type="boolean" variable="$cleanUtf8"/>
      <return description="the number of characters in" type="int">string str having character encoding
          encoding. A multi-byte character is
          counted as 1.</return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5071"/>
      <comment value="INFO: this is only a fallback for old versions" line="5074"/>
    </inline>
  </method>
  <method name="strnatcasecmp" start="5096" end="5099" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Case insensitive string comparisons using a &quot;natural order&quot; algorithm."/>
      <param type="string" variable="$str1"/>
      <param type="string" variable="$str2"/>
      <return description="&lt;strong&gt;&lt; 0&lt;/strong&gt; if str1 is less than str2&lt;br /&gt;" type="int">&lt;strong&gt;&gt; 0&lt;/strong&gt; if str1 is greater than str2&lt;br /&gt;
            &lt;strong&gt;0&lt;/strong&gt; if they are equal</return>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
  </method>
  <method name="strnatcmp" start="5120" end="5123" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="String comparisons using a &quot;natural order&quot; algorithm"/>
      <link value="http://php.net/manual/en/function.strnatcmp.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str1">The first string.
                    &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$str2">The second string.
                    &lt;/p&gt;</param>
      <return description="Similar to other string comparison functions, this one returns &amp;lt; 0 if" type="int">str1 is less than str2; &amp;gt;
0 if str1 is greater than
str2, and 0 if they are equal.</return>
      <since value="4.0"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
  </method>
  <method name="strncasecmp" start="5146" end="5149" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Binary safe case-insensitive string comparison of the first n characters"/>
      <link value="http://php.net/manual/en/function.strncasecmp.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str1">The first string.
                    &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$str2">The second string.
                    &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="int" variable="$len">The length of strings to be used in the comparison.
                    &lt;/p&gt;</param>
      <return description="&amp;lt; 0 if &lt;i&gt;str1&lt;/i&gt; is less than" type="int">&lt;i&gt;str2&lt;/i&gt;; &amp;gt; 0 if &lt;i&gt;str1&lt;/i&gt; is
greater than &lt;i&gt;str2&lt;/i&gt;, and 0 if they are equal.</return>
      <since value="4.0.4"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
    <parameter name="len" byreference="false" type="{unknown}"/>
  </method>
  <method name="strncmp" start="5173" end="5176" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Binary safe string comparison of the first n characters"/>
      <link value="http://php.net/manual/en/function.strncmp.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str1">The first string.
                    &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$str2">The second string.
                    &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="int" variable="$len">Number of characters to use in the comparison.
                    &lt;/p&gt;</param>
      <return description="&amp;lt; 0 if &lt;i&gt;str1&lt;/i&gt; is less than" type="int">&lt;i&gt;str2&lt;/i&gt;; &amp;gt; 0 if &lt;i&gt;str1&lt;/i&gt;
is greater than &lt;i&gt;str2&lt;/i&gt;, and 0 if they are
equal.</return>
      <since value="4.0"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="str1" byreference="false" type="{unknown}"/>
    <parameter name="str2" byreference="false" type="{unknown}"/>
    <parameter name="len" byreference="false" type="{unknown}"/>
  </method>
  <method name="strpbrk" start="5194" end="5208" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Search a string for any of a set of characters"/>
      <link value="http://php.net/manual/en/function.strpbrk.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string where char_list is looked for.
                         &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$char_list">This parameter is case sensitive.
                         &lt;/p&gt;</param>
      <return description="a string starting from the character found, or false if it is" type="string">not found.</return>
      <since value="5.0"/>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="char_list" byreference="false" type="{unknown}"/>
  </method>
  <method name="strpos" start="5230" end="5285" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Find position of first occurrence of string in a string."/>
      <link value="http://php.net/manual/en/function.mb-strpos.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string being checked.
                             &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The position counted from the beginning of haystack.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$offset">The search offset. If it is not specified, 0 is used.
                             &lt;/p&gt;</param>
      <param type="string" variable="$encoding"/>
      <param description="Clean non UTF-8 chars from the string." type="boolean" variable="$cleanUtf8"/>
      <return description="The numeric position of the first occurrence of needle in the haystack string.&lt;br /&gt;" type="int">If needle is not found it returns false.</return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5239"/>
      <comment value="iconv and mbstring do not support integer $needle" line="5243"/>
    </inline>
  </method>
  <method name="strrchr" start="5315" end="5320" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Finds the last occurrence of a character in a string within another."/>
      <link value="http://php.net/manual/en/function.mb-strrchr.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string from which to get the last occurrence
                        of needle
                        &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The string to find in haystack
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$part">Determines which portion of haystack
                        this function returns.
                        If set to true, it returns all of haystack
                        from the beginning to the last occurrence of needle.
                        If set to false, it returns all of haystack
                        from the last occurrence of needle to the end,
                        &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$encoding">Character encoding name to use.
                        If it is omitted, internal character encoding is used.
                        &lt;/p&gt;</param>
      <return description="the portion of haystack." type="string">or false if needle is not found.</return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="part" byreference="false" type="boolean" default="false"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="strrev" start="5329" end="5332" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Reverses characters order in the string."/>
      <param description="The input string" type="string" variable="$str"/>
      <return description="The string with characters in the reverse sequence" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="strrichr" start="5362" end="5367" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Finds the last occurrence of a character in a string within another, case insensitive."/>
      <link value="http://php.net/manual/en/function.mb-strrichr.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string from which to get the last occurrence
                        of needle
                        &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The string to find in haystack
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$part">Determines which portion of haystack
                        this function returns.
                        If set to true, it returns all of haystack
                        from the beginning to the last occurrence of needle.
                        If set to false, it returns all of haystack
                        from the last occurrence of needle to the end,
                        &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$encoding">Character encoding name to use.
                        If it is omitted, internal character encoding is used.
                        &lt;/p&gt;</param>
      <return description="the portion of haystack." type="string">or false if needle is not found.</return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="part" byreference="false" type="boolean" default="false"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="strripos" start="5378" end="5381" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Find position of last occurrence of a case-insensitive string."/>
      <param description="The string to look in" type="string" variable="$haystack"/>
      <param description="The string to look for" type="string" variable="$needle"/>
      <param description="(Optional) Number of characters to ignore in the beginning or end" type="int" variable="$offset"/>
      <return description="The position of offset" type="int"/>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
  </method>
  <method name="strrpos" start="5406" end="5457" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Find position of last occurrence of a string in a string."/>
      <link value="http://php.net/manual/en/function.mb-strrpos.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string being checked, for the last occurrence
                             of needle
                             &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="object" variable="$needle">The string to find in haystack.
                             Or a code point as int.
                             &lt;/p&gt;<type full="voku\helper\string|int" namespace="voku\helper" name="string|int"/></param>
      <param description="[optional] May be specified to begin searching an arbitrary number of characters into" type="int" variable="$offset">the string. Negative values will stop searching at an arbitrary point
                             prior to the end of the string.</param>
      <param description="Clean non UTF-8 chars from the string" type="boolean" variable="$cleanUtf8"/>
      <return description="the numeric position of" type="int">the last occurrence of needle in the
haystack string. If
needle is not found, it returns false.</return>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5420"/>
      <comment value="fallback" line="5441"/>
    </inline>
  </method>
  <method name="strspn" start="5470" end="5477" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Finds the length of the initial segment of a string consisting entirely of characters contained within a given mask."/>
      <param type="string" variable="$str"/>
      <param type="string" variable="$mask"/>
      <param type="int" variable="$offset"/>
      <param type="int" variable="$length"/>
      <return type="object">
        <type full="voku\helper\int|null" namespace="voku\helper" name="int|null"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="mask" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="length" byreference="false" type="integer" default="2147483647"/>
  </method>
  <method name="strstr" start="5497" end="5502" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns part of haystack string from the first occurrence of needle to the end of haystack."/>
      <link value="http://php.net/manual/en/function.grapheme-strstr.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The input string. Must be valid UTF-8.
                             &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The string to look for. Must be valid UTF-8.
                             &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$before_needle">If &lt;b&gt;TRUE&lt;/b&gt;, grapheme_strstr() returns the part of the
                             haystack before the first occurrence of the needle (excluding the needle).
                             &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return description="the portion of string, or FALSE if needle is not found." type="string"/>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="before_needle" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="strtocasefold" start="5514" end="5540" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Unicode transformation for case-less matching."/>
      <link value="http://unicode.org/reports/tr21/tr21-5.html"/>
      <param type="string" variable="$str"/>
      <param type="object" variable="$full">
        <type full="voku\helper\bool" namespace="voku\helper" name="bool"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="full" byreference="false" type="boolean" default="true"/>
  </method>
  <method name="strtolower" start="5555" end="5567" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="(PHP 4 &amp;gt;= 4.3.0, PHP 5)&lt;br/&gt; Make a string lowercase."/>
      <link value="http://php.net/manual/en/function.mb-strtolower.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The string being lowercased.
                   &lt;/p&gt;</param>
      <param type="string" variable="$encoding"/>
      <return description="str with all alphabetic characters converted to lowercase." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <inline>
      <comment value="init" line="5563"/>
    </inline>
  </method>
  <method name="strtonatfold" start="5576" end="5579" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Generic case sensitive transformation for collation matching."/>
      <param type="string" variable="$s"/>
      <return type="string"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
  </method>
  <method name="strtoupper" start="5593" end="5623" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Make a string uppercase."/>
      <link value="http://php.net/manual/en/function.mb-strtoupper.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The string being uppercased.
                   &lt;/p&gt;</param>
      <param type="string" variable="$encoding"/>
      <return description="str with all alphabetic characters converted to uppercase." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <inline>
      <comment value="init" line="5601"/>
    </inline>
  </method>
  <method name="strtr" start="5647" end="5665" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Translate characters or replace sub-strings."/>
      <link value="http://php.net/manual/en/function.strtr.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The string being translated.
                          &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="object" variable="$from">The string replacing from.
                          &lt;/p&gt;<type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/></param>
      <param description="&lt;p&gt;" type="object" variable="$to">The string being translated to to.
                          &lt;/p&gt;<type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/></param>
      <return description="This function returns a copy of str," type="string">translating all occurrences of each character in
from to the corresponding character in
to.</return>
      <since value="4.0"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="from" byreference="false" type="{unknown}"/>
    <parameter name="to" byreference="false" type="{unknown}" default="" constant="INF"/>
  </method>
  <method name="strwidth" start="5674" end="5680" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return the width of a string."/>
      <param type="string" variable="$s"/>
      <return type="int"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="init" line="5676"/>
    </inline>
  </method>
  <method name="substr" start="5702" end="5747" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get part of a string."/>
      <link value="http://php.net/manual/en/function.mb-substr.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The string being checked.
                          &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="int" variable="$start">The first position used in str.
                          &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$length">The maximum length of the returned string.
                          &lt;/p&gt;</param>
      <param type="string" variable="$encoding"/>
      <param description="Clean non UTF-8 chars from the string" type="boolean" variable="$cleanUtf8"/>
      <return description="mb_substr returns the portion of" type="string">str specified by the start and length parameters.</return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="start" byreference="false" type="integer" default="0"/>
    <parameter name="length" byreference="false" type="{unknown}" default="" constant="null"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
    <parameter name="cleanUtf8" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="init" line="5710"/>
      <comment value="fallback" line="5740"/>
      <comment value="split to array, and remove invalid characters" line="5742"/>
      <comment value="extract relevant part, and join to make sting again" line="5745"/>
    </inline>
  </method>
  <method name="substr_compare" start="5762" end="5768" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Binary safe comparison of two strings from an offset, up to length characters."/>
      <param description="The main string being compared." type="string" variable="$main_str"/>
      <param description="The secondary string being compared." type="string" variable="$str"/>
      <param description="The start position for the comparison. If negative, it starts counting from the" type="int" variable="$offset">end of the string.</param>
      <param description="The length of the comparison. The default value is the largest of the length of" type="int" variable="$length">the str compared to the length of main_str less the offset.</param>
      <param description="If case_insensitivity is TRUE, comparison is case insensitive." type="boolean" variable="$case_insensitivity"/>
      <return type="int"/>
    </docblock>
    <parameter name="main_str" byreference="false" type="{unknown}"/>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="integer" default="2147483647"/>
    <parameter name="case_insensitivity" byreference="false" type="boolean" default="false"/>
  </method>
  <method name="substr_count" start="5794" end="5813" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Count the number of substring occurrences"/>
      <link value="http://php.net/manual/en/function.substr-count.php"/>
      <param description="&lt;p&gt;" type="string" variable="$haystack">The string to search in
                        &lt;/p&gt;</param>
      <param description="&lt;p&gt;" type="string" variable="$needle">The substring to search for
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$offset">The offset where to start counting
                        &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$length">The maximum length after the specified offset to search for the
                        substring. It outputs a warning if the offset plus the length is
                        greater than the haystack length.
                        &lt;/p&gt;</param>
      <return description="This functions returns an integer." type="int"/>
      <since value="4.0"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="offset" byreference="false" type="integer" default="0"/>
    <parameter name="length" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="substr_replace" start="5827" end="5891" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Replace text within a portion of a string.">source: https://gist.github.com/stemar/8287074</description>
      <param type="object" variable="$str">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <param type="object" variable="$replacement">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <param type="object" variable="$start">
        <type full="voku\helper\int|array" namespace="voku\helper" name="int|array"/>
      </param>
      <param type="object" variable="$length">
        <type full="voku\helper\null|int|array" namespace="voku\helper" name="null|int|array"/>
      </param>
      <return type="object">
        <type full="voku\helper\array|string" namespace="voku\helper" name="array|string"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="replacement" byreference="false" type="{unknown}"/>
    <parameter name="start" byreference="false" type="{unknown}"/>
    <parameter name="length" byreference="false" type="{unknown}" default="" constant="null"/>
  </method>
  <method name="swapCase" start="5901" end="5926" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns a case swapped version of the string."/>
      <param type="string" variable="$str"/>
      <param type="string" variable="$encoding"/>
      <return description="each character's case swapped" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="toAscii" start="5936" end="5939" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::to_ascii()&quot;"/>
      <param description="The input string e.g. a UTF-8 String" type="string" variable="$s"/>
      <param type="string" variable="$subst_chr"/>
      <return type="string"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
    <parameter name="subst_chr" byreference="false" type="string" default="'?'"/>
  </method>
  <method name="toLatin1" start="5948" end="5951" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::to_latin1()&quot;"/>
      <param variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="toUTF8" start="5960" end="5963" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::to_utf8&quot;"/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="to_ascii" start="5973" end="6043" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="convert to ASCII"/>
      <param description="The input string e.g. a UTF-8 String" type="string" variable="$s"/>
      <param type="string" variable="$subst_chr"/>
      <return type="string"/>
    </docblock>
    <parameter name="s" byreference="false" type="{unknown}"/>
    <parameter name="subst_chr" byreference="false" type="string" default="'?'"/>
  </method>
  <method name="to_iso8859" start="6052" end="6055" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::to_win1252()&quot;"/>
      <param type="string" variable="$str"/>
      <return type="object">
        <type full="voku\helper\array|string" namespace="voku\helper" name="array|string"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="to_latin1" start="6064" end="6067" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::to_win1252()&quot;"/>
      <param type="object" variable="$str">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <return type="object">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="to_utf8" start="6090" end="6195" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="This function leaves UTF8 characters alone, while converting almost all non-UTF8 to UTF8.">- It assumes that the encoding of the original string is either WINDOWS-1252 or ISO-8859-1.

- It may fail to convert characters to UTF-8 if they fall into one of these scenarios:

1) when any of these characters:   ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß
   are followed by any of these:  ("group B")
                                   ¡¢£¤¥¦§¨©ª«¬▔®¯°±²³´µ¶•¸¹º»¼½¾¿
For example:   %ABREPRESENT%C9%BB. «REPRESENTÉ»
The "«" (%AB) character will be converted, but the "É" followed by "»" (%C9%BB)
is also a valid unicode character, and will be left unchanged.

2) when any of these: àáâãäåæçèéêëìíîï  are followed by TWO chars from group B,
3) when any of these: ðñòó  are followed by THREE chars from group B.</description>
      <param description="Any string or array." type="object" variable="$str">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <return description="The same string, but UTF8 encoded." type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="@noinspection ForeachInvariantsInspection" line="6110"/>
      <comment value="decode unicode escape sequences" line="6176"/>
      <comment value="decode UTF-8 codepoints" line="6185"/>
    </inline>
  </method>
  <method name="to_win1252" start="6204" end="6223" abstract="false" final="false" static="true" visibility="protected">
    <docblock>
      <description compact="Convert a string into &quot;win1252&quot;-encoding."/>
      <param type="object" variable="$str">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </param>
      <return type="object">
        <type full="voku\helper\string|array" namespace="voku\helper" name="string|array"/>
      </return>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="trim" start="6238" end="6252" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Strip whitespace or other characters from beginning or end of a UTF-8 string.">INFO: This is slower then "trim()"

But we can only use the original-function, if we use &lt;= 7-Bit in the string / chars
but the check for ACSII (7-Bit) cost more time, then we can safe here.</description>
      <param description="The string to be trimmed" type="string" variable="$str"/>
      <param description="Optional characters to be stripped" type="string" variable="$chars"/>
      <return description="The trimmed string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="string" default="''"/>
    <parameter name="chars" byreference="false" type="{unknown}" default="" constant="INF"/>
    <inline>
      <comment value="Info: http://nadeausoftware.com/articles/2007/9/php_tip_how_strip_punctuation_characters_web_page#Unicodecharactercategories" line="6246"/>
    </inline>
  </method>
  <method name="ucfirst" start="6261" end="6264" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Makes string's first char uppercase."/>
      <param description="The input string" type="string" variable="$str"/>
      <return description="The resulting string" type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="ucword" start="6273" end="6276" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="alias for &quot;UTF8::ucfirst&quot;"/>
      <param variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="ucwords" start="6286" end="6318" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Uppercase for all words in the string."/>
      <param type="string" variable="$str"/>
      <param type="array" variable="$exceptions"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="exceptions" byreference="false" type="array" default=""/>
    <inline>
      <comment value="init" line="6292"/>
    </inline>
  </method>
  <method name="urldecode" start="6337" end="6359" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Multi decode html entity &amp; fix urlencoded-win1252-chars.">e.g:
'D&amp;#252;sseldorf'               =&gt; 'Düsseldorf'
'D%FCsseldorf'                  =&gt; 'Düsseldorf'
'D&amp;#xFC;sseldorf'               =&gt; 'Düsseldorf'
'D%26%23xFC%3Bsseldorf'         =&gt; 'Düsseldorf'
'DÃ¼sseldorf'                   =&gt; 'Düsseldorf'
'D%C3%BCsseldorf'               =&gt; 'Düsseldorf'
'D%C3%83%C2%BCsseldorf'         =&gt; 'Düsseldorf'
'D%25C3%2583%25C2%25BCsseldorf' =&gt; 'Düsseldorf'</description>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="urldecode_fix_win1252_chars" start="6366" end="6596" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Return a array with &quot;urlencoded&quot;-win1252 -&gt; UTF-8"/>
      <return type="mixed"/>
    </docblock>
  </method>
  <method name="utf8_decode" start="6605" end="6627" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Decodes an UTF-8 string to ISO-8859-1."/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="init" line="6616"/>
    </inline>
  </method>
  <method name="utf8_encode" start="6636" end="6654" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Encodes an ISO-8859-1 string to UTF-8."/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="utf8_fix_win1252_chars" start="6669" end="6672" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="fix -&gt; utf8-win1252 chars">If you received an UTF-8 string that was converted from Windows-1252 as it was ISO-8859-1
(ignoring Windows-1252 chars from 80 to 9F) use this function to fix it.
See: http://en.wikipedia.org/wiki/Windows-1252</description>
      <deprecated value="use &quot;UTF8::fix_simple_utf8()&quot;"/>
      <param type="string" variable="$str"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
  </method>
  <method name="whitespace_table" start="6684" end="6687" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array with all utf8 whitespace characters."/>
      <see value=": http://www.bogofilter.org/pipermail/bogofilter/2003-March/001889.html"/>
      <author value=": Derek E. derek.isname@gmail.com"/>
      <return description="an array with all known whitespace characters as values and the type of whitespace as keys" type="array">as defined in above URL</return>
    </docblock>
  </method>
  <method name="words_limit" start="6698" end="6723" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Limit the number of words in a string."/>
      <param type="string" variable="$str"/>
      <param type="int" variable="$words"/>
      <param type="string" variable="$strAddOn"/>
      <return type="string"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="words" byreference="false" type="integer" default="100"/>
    <parameter name="strAddOn" byreference="false" type="string" default="'...'"/>
  </method>
  <method name="wordwrap" start="6751" end="6805" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Wraps a string to a given number of characters"/>
      <link value="http://php.net/manual/en/function.wordwrap.php"/>
      <param description="&lt;p&gt;" type="string" variable="$str">The input string.
                     &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="int" variable="$width">The column width.
                     &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="string" variable="$break">The line is broken using the optional
                     break parameter.
                     &lt;/p&gt;</param>
      <param description="[optional] &lt;p&gt;" type="object" variable="$cut">If the cut is set to true, the string is
                     always wrapped at or before the specified width. So if you have
                     a word that is larger than the given width, it is broken apart.
                     (See second example).
                     &lt;/p&gt;<type full="voku\helper\bool" namespace="voku\helper" name="bool"/></param>
      <return description="the given string wrapped at the specified column." type="string"/>
      <since value="4.0.2"/>
      <since value="5.0"/>
    </docblock>
    <parameter name="str" byreference="false" type="{unknown}"/>
    <parameter name="width" byreference="false" type="integer" default="75"/>
    <parameter name="break" byreference="false" type="string" default="&quot;\n&quot;"/>
    <parameter name="cut" byreference="false" type="boolean" default="false"/>
    <inline>
      <comment value="@noinspection ForeachInvariantsInspection" line="6769"/>
    </inline>
  </method>
  <method name="ws" start="6812" end="6815" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Returns an array of Unicode White Space characters."/>
      <return description="An array with numeric code point as key and White Space Character as value." type="array"/>
    </docblock>
  </method>
</class>
